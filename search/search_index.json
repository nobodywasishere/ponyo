{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ponyo Ponyo is a (work-in-progress) ISA simulator currently supporting (some of) LEGv8. It also aims to be a framework for implementing simulators for any number of ISAs. A blog post describing the initial development of this project is on my blog here . Simulator ARM LEGv8 Simulator Harvard architecture Takes in assembly source code Takes in memory file Step through program execution Jump to pre-defined break points in code CLI usage: ponyo [-h] -f ASM [-d MEM] [--isa ISA] [--debug] [--gui] options: -h, --help show this help message and exit -f ASM, --asm ASM Assembly file -d MEM, --mem MEM Data memory file --isa ISA ISA of assembly file --debug --gui Execute directly: $ ./ponyo/ponyo.py -f examples/legv8/fib.asm --debug Install using pip: $ git clone https://github.com/nobodywasishere/ponyo $ cd ponyo $ pip install . ... $ ponyo -f examples/legv8/fib.asm --gui Set breakpoints in the assembly by adding //$break on any given line. GUI Simply run ponyo with the --gui flag and the assembly file you wish to run. Supported Architectures LEGv8 Harvard 33/57 instructions supported [x] ADD, ADDI, ADDS, ADDIS [x] AND, ANDI, ANDS, ANDIS [x] B, B.COND, BL, BR, CBNZ, CBZ [x] EOR, EORI [x] LDUR, LDURB, LDURH [ ] LDURSW, LDXR [x] LSL, LSR [ ] MOVK, MOVZ [x] ORR, ORRI [x] STUR, STURB, STURH [ ] STURSW, STXR [x] SUB, SUBI, SUBS, SUBIS [ ] FADDS, FADDD, FCMPS, FCMPD, FDIVS, FDIVD, FMULS, FMULD, FSUBS, FSUBD [ ] LDURS, LDURD, MUL, SDIV, SMULH, UDIV, UMULH [x] CMP, CMPI, MOV [ ] LDA EccCPU 13/13 instructions supported Fishbowl icon created by Becris - Flaticon","title":"ponyo"},{"location":"#ponyo","text":"Ponyo is a (work-in-progress) ISA simulator currently supporting (some of) LEGv8. It also aims to be a framework for implementing simulators for any number of ISAs. A blog post describing the initial development of this project is on my blog here .","title":"ponyo"},{"location":"#simulator","text":"ARM LEGv8 Simulator Harvard architecture Takes in assembly source code Takes in memory file Step through program execution Jump to pre-defined break points in code","title":"Simulator"},{"location":"#cli","text":"usage: ponyo [-h] -f ASM [-d MEM] [--isa ISA] [--debug] [--gui] options: -h, --help show this help message and exit -f ASM, --asm ASM Assembly file -d MEM, --mem MEM Data memory file --isa ISA ISA of assembly file --debug --gui Execute directly: $ ./ponyo/ponyo.py -f examples/legv8/fib.asm --debug Install using pip: $ git clone https://github.com/nobodywasishere/ponyo $ cd ponyo $ pip install . ... $ ponyo -f examples/legv8/fib.asm --gui Set breakpoints in the assembly by adding //$break on any given line.","title":"CLI"},{"location":"#gui","text":"Simply run ponyo with the --gui flag and the assembly file you wish to run.","title":"GUI"},{"location":"#supported-architectures","text":"","title":"Supported Architectures"},{"location":"#legv8-harvard","text":"33/57 instructions supported [x] ADD, ADDI, ADDS, ADDIS [x] AND, ANDI, ANDS, ANDIS [x] B, B.COND, BL, BR, CBNZ, CBZ [x] EOR, EORI [x] LDUR, LDURB, LDURH [ ] LDURSW, LDXR [x] LSL, LSR [ ] MOVK, MOVZ [x] ORR, ORRI [x] STUR, STURB, STURH [ ] STURSW, STXR [x] SUB, SUBI, SUBS, SUBIS [ ] FADDS, FADDD, FCMPS, FCMPD, FDIVS, FDIVD, FMULS, FMULD, FSUBS, FSUBD [ ] LDURS, LDURD, MUL, SDIV, SMULH, UDIV, UMULH [x] CMP, CMPI, MOV [ ] LDA","title":"LEGv8 Harvard"},{"location":"#ecccpu","text":"13/13 instructions supported Fishbowl icon created by Becris - Flaticon","title":"EccCPU"},{"location":"docstrings/","text":"API Overview Modules ecccpu ecccpu.decode ecccpu.execr ecccpu.mem gui legv8 legv8.decode legv8.execr legv8.mem ponyo Classes mem.mem : Memory class for the EccCPU ISA mem.mem : Memory class for the LEGv8 ISA ponyo.Simulator : ISA Simulator Functions decode.decode : Decodes each instruction into a simpler format, replacing symbols, register aliases, and removing comments for the EccCPU ISA decode.findSymbols : Find the symbols in the instruction memory, e.g. main: execr.execr : Executes the instruction on the simulator state for the EccCPU ISA execr.immu2int : Converts an immediate value into an integer gui.currCode : String showing surrounding code to PC gui.gui : Runs an interactive GUI for the simulator using PySimpleGUIQt decode.decode : Decodes each instruction into a simpler format, replacing symbols, register aliases, and removing comments for the LEGv8 ISA decode.findSymbols : Find the symbols in the instruction memory, e.g. main: execr.execr : Executes the instruction on the simulator state for the LEGv8 ISA execr.immu2int : Converts an immediate value into an integer This file was automatically generated via lazydocs .","title":"Overview"},{"location":"docstrings/#api-overview","text":"","title":"API Overview"},{"location":"docstrings/#modules","text":"ecccpu ecccpu.decode ecccpu.execr ecccpu.mem gui legv8 legv8.decode legv8.execr legv8.mem ponyo","title":"Modules"},{"location":"docstrings/#classes","text":"mem.mem : Memory class for the EccCPU ISA mem.mem : Memory class for the LEGv8 ISA ponyo.Simulator : ISA Simulator","title":"Classes"},{"location":"docstrings/#functions","text":"decode.decode : Decodes each instruction into a simpler format, replacing symbols, register aliases, and removing comments for the EccCPU ISA decode.findSymbols : Find the symbols in the instruction memory, e.g. main: execr.execr : Executes the instruction on the simulator state for the EccCPU ISA execr.immu2int : Converts an immediate value into an integer gui.currCode : String showing surrounding code to PC gui.gui : Runs an interactive GUI for the simulator using PySimpleGUIQt decode.decode : Decodes each instruction into a simpler format, replacing symbols, register aliases, and removing comments for the LEGv8 ISA decode.findSymbols : Find the symbols in the instruction memory, e.g. main: execr.execr : Executes the instruction on the simulator state for the LEGv8 ISA execr.immu2int : Converts an immediate value into an integer This file was automatically generated via lazydocs .","title":"Functions"},{"location":"docstrings/ecccpu.decode/","text":"module ecccpu.decode function findSymbols findSymbols(imem: list[str]) \u2192 dict[str, str] Find the symbols in the instruction memory, e.g. main: Args: imem (list[str]): Instruction memory Returns: dict[str, int] : Dictionary of symbols corresponding with their line numbers function decode decode(pc: int, assembly: str, sym: dict[str, int]) \u2192 dict[str, str] Decodes each instruction into a simpler format, replacing symbols, register aliases, and removing comments for the EccCPU ISA Args: pc (int): Program counter assembly (str): Instruction to decode sym (dict[str, int]): Symbol dictionary Returns: dict[str, str] : Decoded instruction This file was automatically generated via lazydocs .","title":"Ecccpu.decode"},{"location":"docstrings/ecccpu.decode/#module-ecccpudecode","text":"","title":"module ecccpu.decode"},{"location":"docstrings/ecccpu.decode/#function-findsymbols","text":"findSymbols(imem: list[str]) \u2192 dict[str, str] Find the symbols in the instruction memory, e.g. main: Args: imem (list[str]): Instruction memory Returns: dict[str, int] : Dictionary of symbols corresponding with their line numbers","title":"function findSymbols"},{"location":"docstrings/ecccpu.decode/#function-decode","text":"decode(pc: int, assembly: str, sym: dict[str, int]) \u2192 dict[str, str] Decodes each instruction into a simpler format, replacing symbols, register aliases, and removing comments for the EccCPU ISA Args: pc (int): Program counter assembly (str): Instruction to decode sym (dict[str, int]): Symbol dictionary Returns: dict[str, str] : Decoded instruction This file was automatically generated via lazydocs .","title":"function decode"},{"location":"docstrings/ecccpu.execr/","text":"module ecccpu.execr function immu2int immu2int(immu: str) \u2192 int Converts an immediate value into an integer Args: immu (str): Immediate value (e.g. #10 , 0x03 , b00101 ) Returns: int : Value stored in immediate function execr execr(mem, instr: dict[str, str]) Executes the instruction on the simulator state for the EccCPU ISA Args: mem (ecccpu.mem): ISA memory class instr (dict[str, str]): Decoded instruction Raises: Exception : If an unsupported instruction is executed This file was automatically generated via lazydocs .","title":"Ecccpu.execr"},{"location":"docstrings/ecccpu.execr/#module-ecccpuexecr","text":"","title":"module ecccpu.execr"},{"location":"docstrings/ecccpu.execr/#function-immu2int","text":"immu2int(immu: str) \u2192 int Converts an immediate value into an integer Args: immu (str): Immediate value (e.g. #10 , 0x03 , b00101 ) Returns: int : Value stored in immediate","title":"function immu2int"},{"location":"docstrings/ecccpu.execr/#function-execr","text":"execr(mem, instr: dict[str, str]) Executes the instruction on the simulator state for the EccCPU ISA Args: mem (ecccpu.mem): ISA memory class instr (dict[str, str]): Decoded instruction Raises: Exception : If an unsupported instruction is executed This file was automatically generated via lazydocs .","title":"function execr"},{"location":"docstrings/ecccpu/","text":"module ecccpu This file was automatically generated via lazydocs .","title":"Ecccpu"},{"location":"docstrings/ecccpu/#module-ecccpu","text":"This file was automatically generated via lazydocs .","title":"module ecccpu"},{"location":"docstrings/ecccpu.mem/","text":"module ecccpu.mem class mem Memory class for the EccCPU ISA method __init__ __init__(dmem=[], dmemNum=16) Init the memory Args: dmem (list, optional): Initial ram. Defaults to []. dmemNum (int, optional): Length of zeroed ram when dmem is default. Defaults to 16. method mem2str mem2str() For GUI, returns a string of the values stored in memory Returns: str : Formatted memory values method pcfl2str pcfl2str() For GUI, returns a string of the values stored in PC and flags Returns: str : Formatted PC and flag values method print print() Prints the data in the registers and memory to stdout method ram_read ram_read(addr: int) \u2192 int Read from ram Args: addr (int): Byte-address to read from Returns: int : Stored value method ram_write ram_write(value: int, addr: int) Write to ram Args: value (int): Value to be stored addr (int): Byte-address to store at method reg2str reg2str() For GUI, returns a string of the values stored in registers Returns: str : Formatted register values method regs_read regs_read(reg: str) \u2192 int Read the value stored in a register Args: reg (str): Register string (e.g. r9 , 1 ) Returns: int : Value stored in register method regs_write regs_write(reg: str, value: int) Write a value to a register Args: reg (str): Register string (e.g. r9 , 1 ) value (int): Value to store method reset reset() Resets the memory to initialized values This file was automatically generated via lazydocs .","title":"Ecccpu.mem"},{"location":"docstrings/ecccpu.mem/#module-ecccpumem","text":"","title":"module ecccpu.mem"},{"location":"docstrings/ecccpu.mem/#class-mem","text":"Memory class for the EccCPU ISA","title":"class mem"},{"location":"docstrings/ecccpu.mem/#method-__init__","text":"__init__(dmem=[], dmemNum=16) Init the memory Args: dmem (list, optional): Initial ram. Defaults to []. dmemNum (int, optional): Length of zeroed ram when dmem is default. Defaults to 16.","title":"method __init__"},{"location":"docstrings/ecccpu.mem/#method-mem2str","text":"mem2str() For GUI, returns a string of the values stored in memory Returns: str : Formatted memory values","title":"method mem2str"},{"location":"docstrings/ecccpu.mem/#method-pcfl2str","text":"pcfl2str() For GUI, returns a string of the values stored in PC and flags Returns: str : Formatted PC and flag values","title":"method pcfl2str"},{"location":"docstrings/ecccpu.mem/#method-print","text":"print() Prints the data in the registers and memory to stdout","title":"method print"},{"location":"docstrings/ecccpu.mem/#method-ram_read","text":"ram_read(addr: int) \u2192 int Read from ram Args: addr (int): Byte-address to read from Returns: int : Stored value","title":"method ram_read"},{"location":"docstrings/ecccpu.mem/#method-ram_write","text":"ram_write(value: int, addr: int) Write to ram Args: value (int): Value to be stored addr (int): Byte-address to store at","title":"method ram_write"},{"location":"docstrings/ecccpu.mem/#method-reg2str","text":"reg2str() For GUI, returns a string of the values stored in registers Returns: str : Formatted register values","title":"method reg2str"},{"location":"docstrings/ecccpu.mem/#method-regs_read","text":"regs_read(reg: str) \u2192 int Read the value stored in a register Args: reg (str): Register string (e.g. r9 , 1 ) Returns: int : Value stored in register","title":"method regs_read"},{"location":"docstrings/ecccpu.mem/#method-regs_write","text":"regs_write(reg: str, value: int) Write a value to a register Args: reg (str): Register string (e.g. r9 , 1 ) value (int): Value to store","title":"method regs_write"},{"location":"docstrings/ecccpu.mem/#method-reset","text":"reset() Resets the memory to initialized values This file was automatically generated via lazydocs .","title":"method reset"},{"location":"docstrings/gui/","text":"module gui Global Variables font button_size layout function currCode currCode(sim, low: int = -5, high: int = 5) \u2192 str String showing surrounding code to PC Args: sim (ponyo.Simulator): Current Simulator instance low (int, optional): Number of lines before PC. Defaults to -5. high (int, optional): Number of lines after PC. Defaults to 5. Returns: str : Section of code arround PC function gui gui(sim, isa) Runs an interactive GUI for the simulator using PySimpleGUIQt Args: sim (ponyo.Simulator): Starting Simulator with loaded imem/dmem This file was automatically generated via lazydocs .","title":"Gui"},{"location":"docstrings/gui/#module-gui","text":"","title":"module gui"},{"location":"docstrings/gui/#global-variables","text":"font button_size layout","title":"Global Variables"},{"location":"docstrings/gui/#function-currcode","text":"currCode(sim, low: int = -5, high: int = 5) \u2192 str String showing surrounding code to PC Args: sim (ponyo.Simulator): Current Simulator instance low (int, optional): Number of lines before PC. Defaults to -5. high (int, optional): Number of lines after PC. Defaults to 5. Returns: str : Section of code arround PC","title":"function currCode"},{"location":"docstrings/gui/#function-gui","text":"gui(sim, isa) Runs an interactive GUI for the simulator using PySimpleGUIQt Args: sim (ponyo.Simulator): Starting Simulator with loaded imem/dmem This file was automatically generated via lazydocs .","title":"function gui"},{"location":"docstrings/legv8.decode/","text":"module legv8.decode function findSymbols findSymbols(imem: list) \u2192 dict[str, int] Find the symbols in the instruction memory, e.g. main: Args: imem (list[str]): Instruction memory Returns: dict[str, int] : Dictionary of symbols corresponding with their line numbers function decode decode(pc: int, assembly: str, sym: dict) \u2192 dict[str, str] Decodes each instruction into a simpler format, replacing symbols, register aliases, and removing comments for the LEGv8 ISA Args: pc (int): Program counter assembly (str): Instruction to decode sym (dict[str, int]): Symbol dictionary Returns: dict[str, str] : Decoded instruction This file was automatically generated via lazydocs .","title":"Legv8.decode"},{"location":"docstrings/legv8.decode/#module-legv8decode","text":"","title":"module legv8.decode"},{"location":"docstrings/legv8.decode/#function-findsymbols","text":"findSymbols(imem: list) \u2192 dict[str, int] Find the symbols in the instruction memory, e.g. main: Args: imem (list[str]): Instruction memory Returns: dict[str, int] : Dictionary of symbols corresponding with their line numbers","title":"function findSymbols"},{"location":"docstrings/legv8.decode/#function-decode","text":"decode(pc: int, assembly: str, sym: dict) \u2192 dict[str, str] Decodes each instruction into a simpler format, replacing symbols, register aliases, and removing comments for the LEGv8 ISA Args: pc (int): Program counter assembly (str): Instruction to decode sym (dict[str, int]): Symbol dictionary Returns: dict[str, str] : Decoded instruction This file was automatically generated via lazydocs .","title":"function decode"},{"location":"docstrings/legv8.execr/","text":"module legv8.execr function immu2int immu2int(immu: str) \u2192 int Converts an immediate value into an integer Args: immu (str): Immediate value (e.g. #10 , 0x03 , b00101 ) Returns: int : Value stored in immediate function execr execr(mem, instr: dict) Executes the instruction on the simulator state for the LEGv8 ISA Args: mem (legv8.mem): ISA memory class instr (dict[str, str]): Decoded instruction Raises: Exception : If an unsupported instruction is executed This file was automatically generated via lazydocs .","title":"Legv8.execr"},{"location":"docstrings/legv8.execr/#module-legv8execr","text":"","title":"module legv8.execr"},{"location":"docstrings/legv8.execr/#function-immu2int","text":"immu2int(immu: str) \u2192 int Converts an immediate value into an integer Args: immu (str): Immediate value (e.g. #10 , 0x03 , b00101 ) Returns: int : Value stored in immediate","title":"function immu2int"},{"location":"docstrings/legv8.execr/#function-execr","text":"execr(mem, instr: dict) Executes the instruction on the simulator state for the LEGv8 ISA Args: mem (legv8.mem): ISA memory class instr (dict[str, str]): Decoded instruction Raises: Exception : If an unsupported instruction is executed This file was automatically generated via lazydocs .","title":"function execr"},{"location":"docstrings/legv8/","text":"module legv8 This file was automatically generated via lazydocs .","title":"Legv8"},{"location":"docstrings/legv8/#module-legv8","text":"This file was automatically generated via lazydocs .","title":"module legv8"},{"location":"docstrings/legv8.mem/","text":"module legv8.mem class mem Memory class for the LEGv8 ISA method __init__ __init__(dmem: list = [], dmem_num: int = 512) Initialize the memory Args: dmem (list, optional): Initial data memory. Defaults to []. dmem_num (int, optional): Length of zeroed data memory when dmem is default. Defaults to 512. method dmem_read dmem_read(addr: int, offset: int, size: int) \u2192 int Read from data memory Args: addr (int): Address to start from offset (int): Offset from address size (int): Number of bytes to read Returns: int : Value stored in data memory method dmem_write dmem_write(value: int, addr: int, offset: int, size: int) Write to data memory Args: value (int): Value to be stored addr (int): Address to start from offset (int): Offset from address size (int): Number of bytes to write method mem2str mem2str() \u2192 str For GUI, returns a string of the values stored in memory Returns: str : Formatted memory values method pcfl2str pcfl2str() \u2192 str For GUI, returns a string of the values stored in PC and flags Returns: str : Formatted PC and flag values method print print() Prints the data in the registers and memory to stdout method reg2str reg2str() \u2192 str For GUI, returns a string of the values stored in registers Returns: str : Formatted register values method regs_read regs_read(reg: str) \u2192 int Read the value stored in a register Args: reg (str): Register string (e.g. X9 , X11 ) Returns: int : Value stored in register method regs_write regs_write(reg: str, value: int) Write a value to a register Args: reg (str): Register string (e.g. X9 , X11 ) value (int): Value to store method reset reset() Resets the memory to initialized values This file was automatically generated via lazydocs .","title":"Legv8.mem"},{"location":"docstrings/legv8.mem/#module-legv8mem","text":"","title":"module legv8.mem"},{"location":"docstrings/legv8.mem/#class-mem","text":"Memory class for the LEGv8 ISA","title":"class mem"},{"location":"docstrings/legv8.mem/#method-__init__","text":"__init__(dmem: list = [], dmem_num: int = 512) Initialize the memory Args: dmem (list, optional): Initial data memory. Defaults to []. dmem_num (int, optional): Length of zeroed data memory when dmem is default. Defaults to 512.","title":"method __init__"},{"location":"docstrings/legv8.mem/#method-dmem_read","text":"dmem_read(addr: int, offset: int, size: int) \u2192 int Read from data memory Args: addr (int): Address to start from offset (int): Offset from address size (int): Number of bytes to read Returns: int : Value stored in data memory","title":"method dmem_read"},{"location":"docstrings/legv8.mem/#method-dmem_write","text":"dmem_write(value: int, addr: int, offset: int, size: int) Write to data memory Args: value (int): Value to be stored addr (int): Address to start from offset (int): Offset from address size (int): Number of bytes to write","title":"method dmem_write"},{"location":"docstrings/legv8.mem/#method-mem2str","text":"mem2str() \u2192 str For GUI, returns a string of the values stored in memory Returns: str : Formatted memory values","title":"method mem2str"},{"location":"docstrings/legv8.mem/#method-pcfl2str","text":"pcfl2str() \u2192 str For GUI, returns a string of the values stored in PC and flags Returns: str : Formatted PC and flag values","title":"method pcfl2str"},{"location":"docstrings/legv8.mem/#method-print","text":"print() Prints the data in the registers and memory to stdout","title":"method print"},{"location":"docstrings/legv8.mem/#method-reg2str","text":"reg2str() \u2192 str For GUI, returns a string of the values stored in registers Returns: str : Formatted register values","title":"method reg2str"},{"location":"docstrings/legv8.mem/#method-regs_read","text":"regs_read(reg: str) \u2192 int Read the value stored in a register Args: reg (str): Register string (e.g. X9 , X11 ) Returns: int : Value stored in register","title":"method regs_read"},{"location":"docstrings/legv8.mem/#method-regs_write","text":"regs_write(reg: str, value: int) Write a value to a register Args: reg (str): Register string (e.g. X9 , X11 ) value (int): Value to store","title":"method regs_write"},{"location":"docstrings/legv8.mem/#method-reset","text":"reset() Resets the memory to initialized values This file was automatically generated via lazydocs .","title":"method reset"},{"location":"docstrings/ponyo/","text":"module ponyo class Simulator ISA Simulator method __init__ __init__(mem, decode, execr, imem: list, dmem: list = []) Initializes simulator Args: mem (ISA.mem): mem class for the chosen ISA decode (ISA.decode): decode function for the chosen ISA execr (ISA.execr): execute function for the chosen ISA imem (list): Instruction memory as a list, split on newlines dmem (list, optional): Initial data memory. Defaults to []. method run run() Step through the code until it reaches the end method step step() Execute a single instruction This file was automatically generated via lazydocs .","title":"Ponyo"},{"location":"docstrings/ponyo/#module-ponyo","text":"","title":"module ponyo"},{"location":"docstrings/ponyo/#class-simulator","text":"ISA Simulator","title":"class Simulator"},{"location":"docstrings/ponyo/#method-__init__","text":"__init__(mem, decode, execr, imem: list, dmem: list = []) Initializes simulator Args: mem (ISA.mem): mem class for the chosen ISA decode (ISA.decode): decode function for the chosen ISA execr (ISA.execr): execute function for the chosen ISA imem (list): Instruction memory as a list, split on newlines dmem (list, optional): Initial data memory. Defaults to [].","title":"method __init__"},{"location":"docstrings/ponyo/#method-run","text":"run() Step through the code until it reaches the end","title":"method run"},{"location":"docstrings/ponyo/#method-step","text":"step() Execute a single instruction This file was automatically generated via lazydocs .","title":"method step"}]}